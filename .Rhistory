TCTACAGGATCTATCATGAAAAGGAAAAAGGATGATTGGGTCAATGCTACACATATTTTA
AAGGCCGCCAATTTTGCCAAGGCTAAAAGAACAAGGATTCTAGAGAAGGAAGTACTTAAG
GAAACTCATGAAAAAGTTCAGGGTGGATTTGGTAAATATCAGGGTACATGGGTCCCACTG
AACATAGCGAAACAACTGGCAGAAAAATTTAGTGTCTACGATCAGCTGAAACCGTTGTTC
GACTTTACGCAAACAGATGGGTCTGCTTCTCCACCTCCTGCTCCAAAACATCACCATGCC
TCGAAGGTGGATAGGAAAAAGGCTATTAGAAGTGCAAGTACTTCCGCAATTATGGAAACA
AAAAGAAACAACAAGAAAGCCGAGGAAAATCAATTTCAAAGCAGCAAAATATTGGGAAAT
CCCACGGCTGCACCAAGGAAAAGAGGTAGACCGGTAGGATCTACGAGGGGAAGTAGGCGG
AAGTTAGGTGTCAATTTACAACGTTCTCAAAGTGATATGGGATTTCCTAGACCGGCGATA
CCGAATTCTTCAATATCGACAACGCAACTTCCCTCTATTAGATCCACCATGGGACCACAA
TCCCCTACATTGGGTATTCTGGAAGAAGAAAGGCACGATTCTCGACAGCAGCAGCCGCAA
CAAAATAATTCTGCACAGTTCAAAGAAATTGATCTTGAGGACGGCTTATCAAGCGATGTG
GAACCTTCACAACAATTACAACAAGTTTTTAATCAAAATACTGGATTTGTACCCCAACAA
CAATCTTCCTTGATACAGACACAGCAAACAGAATCAATGGCCACGTCCGTATCTTCCTCT
CCTTCATTACCTACGTCACCGGGCGATTTTGCCGATAGTAATCCATTTGAAGAGCGATTT
CCCGGTGGTGGAACATCTCCTATTATTTCCATGATCCCGCGTTATCCTGTAACTTCAAGG
CCTCAAACATCGGATATTAATGATAAAGTTAACAAATACCTTTCAAAATTGGTTGATTAT
TTTATTTCCAATGAAATGAAGTCAAATAAGTCCCTACCACAAGTGTTATTGCACCCACCT
CCACACAGCGCTCCCTATATAGATGCTCCAATCGATCCAGAATTACATACTGCCTTCCAT
TGGGCTTGTTCTATGGGTAATTTACCAATTGCTGAGGCGTTGTACGAAGCCGGAACAAGT
ATCAGATCGACAAATTCTCAAGGCCAAACTCCATTGATGAGAAGTTCCTTATTCCACAAT
TCATACACTAGAAGAACTTTCCCTAGAATTTTCCAGCTACTGCACGAGACCGTATTTGAT
ATCGATTCGCAATCACAAACAGTAATTCACCATATTGTGAAACGAAAATCAACAACACCT
TCTGCAGTTTATTATCTTGATGTTGTGCTATCTAAGATCAAGGATTTTTCCCCACAGTAT
AGAATTGAATTACTTTTAAACACACAAGACAAAAATGGCGATACCGCACTTCATATTGCT
TCTAAAAATGGAGATGTTGTTTTTTTTAATACACTGGTCAAAATGGGTGCATTAACTACT
ATTTCCAATAAGGAAGGATTAACCGCCAATGAAATAATGAATCAACAATATGAGCAAATG
ATGATACAAAATGGTACAAATCAACATGTCAATTCTTCAAACACGGACTTGAATATCCAC
GTTAATACAAACAACATTGAAACGAAAAATGATGTTAATTCAATGGTAATCATGTCGCCT
GTTTCTCCTTCGGATTACATAACCTATCCATCTCAAATTGCCACCAATATATCAAGAAAT
ATTCCAAATGTAGTGAATTCTATGAAGCAAATGGCTAGCATATACAACGATCTTCATGAA
CAGCATGACAACGAAATAAAAAGTTTGCAAAAAACTTTAAAAAGCATTTCTAAGACGAAA
ATACAGGTAAGCCTAAAAACTTTAGAGGTATTGAAAGAGAGCAGTAAAGATGAAAACGGC
GAAGCTCAGACTAATGATGACTTCGAAATTTTATCTCGTCTACAAGAACAAAATACTAAG
AAATTGAGAAAAAGGCTCATACGATACAAACGGTTGATAAAACAAAAGCTGGAATACAGG
CAAACGGTTTTATTGAACAAATTAATAGAAGATGAAACTCAGGCTACCACCAATAACACA
GTTGAGAAAGATAATAATACGCTGGAAAGGTTGGAATTGGCTCAAGAACTAACGATGTTG
CAATTACAAAGGAAAAACAAATTGAGTTCCTTGGTGAAGAAATTTGAAGACAATGCCAAG
ATTCATAAATATAGACGGATTATCAGGGAAGGTACGGAAATGAATATTGAAGAAGTAGAT
AGTTCGCTGGATGTAATACTACAGACATTGATAGCCAACAATAATAAAAATAAGGGCGCA
GAACAGATCATCACAATCTCAAACGCGAATAGTCATGCATAA
# read it
mbp1 <- readLines("./data/S288C_YDL056W_MBP1_coding.fsa")
# Load genetic code tables from the Biostrings package
if (! require(Biostrings, quietly=TRUE)) {
if (! exists("biocLite")) {
source("https://bioconductor.org/biocLite.R")
}
biocLite("Biostrings")
library(Biostrings)
}
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
swappedGC <- function(GC) {
# Return a genetic code with randomly swapped amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments where the
#                       amino acids have been swapped.
aaOrig <- unique(GC)                       # the amino acids in the input code
aaSwap <- sample(aaOrig, length(aaOrig))   # shuffled
names(aaSwap) <- aaOrig                    # name them after the original
GC[1:64] <- aaSwap[GC]                     # replace original with shuffled
return(GC)
}
aaOrig <- unique(GC)                       # the amino acids in the input code
aaSwap <- sample(aaOrig, length(aaOrig))   # shuffled
names(aaSwap) <- aaOrig                    # name them after the original
GC[1:64] <- aaSwap[GC]                     # replace original with shuffled
swappedGC <- function(GC) {
# Return a genetic code with randomly swapped amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments where the
#                       amino acids have been swapped.
aaOrig <- unique(GC)                       # the amino acids in the input code
aaSwap <- sample(aaOrig, length(aaOrig))   # shuffled
names(aaSwap) <- aaOrig                    # name them after the original
GC[1:64] <- aaSwap[GC]                     # replace original with shuffled
return(GC)
}
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
?GC
??GC
function()
?function
?function
?function
?function()
?function
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
randomGC <- function(GC) {
# Return a genetic code with randomly assigned amino acids.
# Parameters:
#    GC   named chr  length-64 character vector of 20 amino acid one-letter
#                       codes plus "*" (stop), named with the codon triplet.
# Value:  named chr  same vector with random amino acid assignments in which
#                       every amino acid and "*" is encoded at least once.
aa <- unique(GC)                           # the amino acids in the input code
GC[1:64] <- sample(aa, 64, replace = TRUE) # random code
while(length(unique(GC)) < length(aa)) {   # We could end up with a code that
# does not contain all amino acids,
# then we sample() again.
GC[1:64] <- sample(aa, 64, replace = TRUE)
}
return(GC)
}
init()
init()
init()
init()
init()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
init()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(installr)
updateR()
init()
updateR()
install.packages("installr")
library(installr)
updateR()
packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, repos='https://cran.rstudio.com/')
sapply(pkg, require, character.only = TRUE)
}
init()
a <- 3
b <- 4
c <- a+b
c
print("Hello")
cat("The value of a is" ,a, "and the value of b is" ,b)
cat("The value of a is", a, "and the value of b is", b)
setwd("~/")
getwd
getwd()
setwd("C:/Users/Dana/Desktop")
setwd("C:/Users/Dana/Desktop/R tutoring")
source("newSum.R")
newSum
newSum(2,3)
neSum(2,3)
newSum(2,3)
source("newSum.R")
newSum(2,3)
newSum(a,b)
newSum(a,b)
source("newSum.R")
newSum(a,b)
newSum(a,b)
source("newSum.R")
newSum(a,b)
result <- newSum(a,b)
result
source("newSum.R")
printNUm()
printNum()
source("newSum.R")
source("newSum.R")
printNum()
source("newSum.R")
printNum()
source("newSum.R")
printNum()
v <- 5:13
print(v)
print(1)
v(1)
v[1]
v[1:3]
length(v)
vec1 <- c(23,44,56)
vec2 <- c(10, 20, 30)
cat(vec1,vec2)
cat(vec1, "\n", vec2)
vec3 <- vec1 + vec2
vec3
vec3 <- vec1 + vec2
vec1 * vec2
vec4 <- 100 60 40
vec4 <- c(100, 60, 40)
sort(vec4)
sample(10)
sample(10)
sample(10)
sample(100)
sample(10, 5)
sample(100, 5)
sample(100, 5)
sample(50:100, 5)
sample(-2000:1000, 17)
mat1 <- matrix(c(3:14), nrow = 4, byrow = TRUE)
mat1
mat1 <- matrix(c(3:14), nrow = 4, byrow = FALSE)
mat1
mat1 <- matrix(c(3:14), byrow = FALSE)
mat1
mat1 <- matrix(c(3:14), nrow = 4, byrow = FALSE)
mat1
mat1[2,3]
mat[1,]
mat1[1,]
mat1[,3]
mat1[3:4,2]
size(mat1)
dim(mat1)
dim(rows(mat1))
dim(mat1)
dim(mat1)[1]
cat("The number of rows of this matrix is", dim(mat1[1]))
cat("The number of rows of this matrix is", dim(mat1)[1])
numOfRows <- dim(mat1)[1]
numOfCols <- dim(mat1)[2]
numOfCols
numOfRows
matrix3 <- matrix(c(60, -30, 100, 200, 4.1, 3.6), nrow = 2)
matrix3
matrix4 <- matrix(c(2.4, 400, -100, 7.8, 3, 70), nrow = 2)
matrix4
matrix3+matrix4
matrix3 - matrix4
matrix3 * matrix4
divNum(3,4)
source("newSum.R")
divNum(3,4)
divNum(3,0)
divNum(3,0)
divNum(3,0)
source("newSum.R")
divNum(3,0)
source("newSum.R")
divNum(3,0)
source("newSum.R")
divNum(3,0)
source("newSum.R")
divNum(3,0)
matrix4 <- matrix(c(2.4, 400, -100, 7.8, 3, 70), nrow = 2)
data.frame(matrix4)
dataFrameA <- data.frame(matrix4)
size(dataFrameA)
dim(dataFrameA)
str(dataFrameA)
str(matrix4)
str(a)
source("newSum.R")
matC <- matrix(c(1:9), nrow=3)
matD <- matrix(c(-9:-1), nrow=3)
matC
matD
multMatandVal(matC,matD,1)
multMatandVal(matC,matD,-1)
multMatandVal(matC,matD,0)
source("newSum.R")
readBoolean(TRUE,1)
readBoolean(TRUE,-1)
readBoolean(TRUE,0)
readBoolean(FALSE,0)
install.packages("ggplot2")
library(ggplot2)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
colnames(emp.data)
rownames(emp.data)
dim(emp.data)
dim(emp.data)[1]
dim(emp.data)[2]
str(emp.data)
summary(emp.data)
(emp.data)
cat(emp.data$salary)
emp.data$salary
emp.data[3]
emp.data[,3]
emp.data[1,3]
newNames <- c("A", "B", "C", "D")
rownames(emp.data) <- newNames
newNames <- c("A", "B", "C", "D", "E")
dim(emp.data)[1]
rownames(emp.data) <- newNames
emp.data
emp.data[1:3,]
emp.data$debt
emp.data$dept
emp.data$dept <- c("IT", "Operations", "IT", "HR", "Finance")
emp.data
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
new.data <- data.frame(
emp_id = 6,
emp_name = "Tom",
salary = 900,
start_date = as.Date("2016-03-01"),
stringsAsFactors = FALSE
)
new.data
emp.data
rbind(emp.data,new.data)
dataProstateCancer <- read.csv("prostate_cancer_DRE_exam_set.csv")
head(dataProstateCancer)
dim(dataProstateCancer)
colnames(dataProstateCancer)
str(dataProstateCancer)
summary(dataProstateCancer)
head(dataProstateCancer)
summary(dataProstateCancer)
dataProstateCancer$radius
summary(dataProstateCancer)[3]
summary(dataProstateCancer$radius)
summary(dataProstateCancer)$radius
summary(dataProstateCancer$radius)
sort(dataProstateCancer$radius)
dataProstateCancer$radius
max(dataProstateCancer$radius)
max(dataProstateCancer$radius) <- 5000
max(dataProstateCancer$radius)
maxofRadius <- max(dataProstateCancer$radius)
maxofRadius <- 5000
max(dataProstateCancer$radius)
maxRadius <- subset( max(dataProstateCancer$radius)
print(maxRadius)
maxRadius <- subset(dataProstateCancer, max(radius))
maxRadius <- subset(dataProstateCancer, radius==25)
maxRadius
Help > Check for Updates
Help > Check for Updates
updateR)
updateR())
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
summary(dataProstateCancer)
head(dataProstateCancer)
source('C:/Users/Dana/Desktop/R tutoring/newSum.R')
readBoolean <- function(boolA, numA){
if(boolA == TRUE & numA >= 0){
print("Good Evening")
}
else
{
print("Bye bye")
}
}
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
colnames(prostateDF)
cat("The features of the dataset are", colnames(prostateDF))
cat("The features of the dataset are \n", colnames(prostateDF))
dim(prostateDF)
rowN <- dim(prostateDF)[1]
colN <- dim(prostateDF)[2]
cat("The number of rows in this dataset are", rowN "and the number of columns are", colN)
cat("The number of rows in this dataset are", rowN, "and the number of columns are", colN)
str(prostateDF)
summary(prostateDF)
cat("The structure of the dataframe is \n", str(prostateDF))
cat("The structure of the dataframe is \n", str(prostateDF))
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
summary(prostateDF)
cat("summary(prostateDF)")
summary(prostateDF)
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
cat("summary(prostateDF)")
summary(prostateDF)
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
print(str(prostateDF))
cat("The structure of the dataframe is \n")
print(str(prostateDF))
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
head(prostateDF)
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
findOutlier(prostateDF$radius)
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
source('C:/Users/Dana/Desktop/R tutoring/Prostate Cancer analysis on R.R')
str("M")
is.numeric("M")
version
print(dataframeChange(head(prostateDF)))
table(head(prostateDF))
table(head(prostateDF))
table(dataframA)
source('C:/Users/Dana/Desktop/R tutoring/DataframesManipulation.R')
print(dataframA)
table(dataframA)
print(dataframA)
table(head(prostateDF$radius))
table((prostateDF$radius))
